-- boot loader for the Monolith kernel. ensures compatibility with OpenLoader. --

_G._START = computer.uptime()

local flags = {
  init = "/sbin/init.lua",
  quiet = false,
  runlevel = 3
}

_G.kernel = {}

-- bootlogger --

kernel.logger = {}
kernel.logger.log = function()end

local blog, tmp, addr, invoke
tmp = computer.tmpAddress() or computer.getBootAddress()

do
  local y, w, h = 0
  local gpu = component.list("gpu")()
  local screen = component.list("screen")()
  local log = function() end
  local show = true
  if gpu and screen and not flags.quiet then
    gpu = component.proxy(gpu)
    gpu.bind(screen)
    w, h = gpu.maxResolution()
    gpu.setResolution(w, h)
    gpu.setForeground(0xDDDDDD)
    gpu.fill(1, 1, w, h, " ")
    function log(msg)
      if y == h then
        gpu.copy(1, 2, w, h, 0, -1)
        gpu.fill(1, h, w, 1, " ")
      else
        y = y + 1
      end
      gpu.set(1, y, msg)
    end
  end
  function kernel.logger.log(msg)
    for line in msg:gmatch("[^\n]+") do
      line = string.format("[ %4.04f ] %s", computer.uptime() - _START, line)
      if show then log(line) end
      invoke(tmp, "write", blog, line .. "\n")
    end
  end
  function kernel.logger.setShown(b)
    checkArg(1, b, "boolean")
    show = b
  end
end

function kernel.logger.panic(reason)
  reason = tostring(reason)
  kernel.logger.setShown(true)
  kernel.logger.log("==== Crash ".. os.date() .." ====")
  local trace = debug.traceback(reason):gsub("\t", "  ")
  kernel.logger.log(trace)
  kernel.logger.log("Press R to reboot.")
  kernel.logger.log("=========== End trace ===========")
  while true do local sig, _, id = computer.pullSignal(0.5) if sig == "key_down" and string.char(id) == "r" then computer.shutdown(true) end computer.beep(440, 0.1) end
end

addr, invoke = computer.getBootAddress(), component.invoke

blog = invoke(tmp, "open", "monolith.log", "a")
local shutdown = computer.shutdown
function computer.shutdown(reboot)
  invoke(tmp, "close", blog)
  shutdown(reboot)
end

kernel.logger.log("Booting Monolith at " .. os.date())

local kernelPath = "/boot/monolith"

local handle, err = invoke(addr, "open", kernelPath)
if not handle then
  error(err)
end

local t = ""
repeat
  local c = invoke(addr, "read", handle, math.huge)
  t = t .. (c or "")
until not c

invoke(addr, "close", handle)

local ok, err = load(t, "=" .. kernelPath, "bt", _G)
if not ok then
  kernel.logger.panic(err)
end

local ok, err = xpcall(ok, debug.traceback, flags)
if not ok and err then
  kernel.logger.panic(err)
end
kernel.logger.panic("kernel halted")
